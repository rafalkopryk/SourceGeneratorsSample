using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace SourceGenerators.Tests;

public class SmartEnumIncrementalSourceGeneratorTests
{
    private const string CountryClassText = @"
namespace TestNamespace;

[SmartEnumGenerators.SmartEnumGenerator]
public partial record Country(string CountryCode, string CountryName)
{
    public static readonly Country Poland = new Country(""PLN"", nameof(Poland));
    public static readonly Country USA = new Country(""US"", nameof(USA));
    public static readonly Country Germany = new Country(""DE"", nameof(Germany));
};
";
    
    private const string ExpectedGeneratedClassText = @"// <auto-generated/>

using System;
using System.Collections.Generic;

namespace TestNamespace;

public partial record Country
{
    public static readonly IEnumerable<Country> Items =
    [
        Poland,
        USA,
        Germany,
    ];
}
";

    [Fact]
    public void GenerateItemsField()
    {
        // Create an instance of the source generator.
        var generator = new SmartEnumIncrementalSourceGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(SmartEnumIncrementalSourceGeneratorTests),
            new[] { CSharpSyntaxTree.ParseText(CountryClassText) },
            new[]
            {
                // To support 'System.Attribute' inheritance, add reference to 'System.Private.CoreLib'.
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Country.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}