using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Xml.Serialization;
using Microsoft.CodeAnalysis;

namespace SourceGenerators;

/// <summary>
/// A sample source generator that creates C# classes based on the text file (in this case, currency https://www.six-group.com/dam/download/financial-information/data-center/iso-currrency/lists/list-one.xml registry).
/// When using a simple text file as a baseline, we can create a non-incremental source generator.
/// </summary>
[Generator]
public class CurrencyIso4217SourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        // No initialization required for this generator.
    }

    public void Execute(GeneratorExecutionContext context)
    {
        // If you would like to put some data to non-compilable file (e.g. a .txt file), mark it as an Additional File.

        // Go through all files marked as an Additional File in file properties.
        foreach (var additionalFile in context.AdditionalFiles)
        {
            if (additionalFile == null)
                continue;

            // Check if the file name is the specific file that we expect.
            if (Path.GetFileName(additionalFile.Path) != "ISO-4217.xml")
                continue;

            var text = additionalFile.GetText();
            if (text == null)
                continue;

            var xmlText = text.ToString();

            var serializer = new XmlSerializer(typeof(ISO4217));
            using var reader = new StringReader(xmlText);
            var iso4217Data = (ISO4217)serializer.Deserialize(reader);

            var currencies = iso4217Data.CurrencyTable.CurrencyEntries
                .GroupBy(x => x.CurrencyCode)
                .Select(x => x.First())
                .Select(x => new
                {
                    Name = x.CurrencyName,
                    Code = x.CurrencyCode,
                    Number = x.CurrencyNumber,
                    MinorUnits = x.MinorUnits,
                })
                .Where(x => !string.IsNullOrWhiteSpace(x.Code) && !string.Equals(x.MinorUnits, "N.A.", StringComparison.OrdinalIgnoreCase))
                .ToArray();

            var className = "Currency";

            var properties = currencies.Select(p =>
                $@"    public static readonly {className} {p.Code} = new {className}(""{p.Name}"", ""{p.Code}"", ""{p.Number}"", {p.MinorUnits});");

            var items = currencies.Select(i =>
                $"         {i.Code},");
            
            // Build up the source code.
            string source = $@"// <auto-generated/>

using System;
using System.Collections.Generic;

namespace Currencies;

public partial record {className}(string Name, string Code, string Number, int MinorUnits)
{{
{string.Join("\n", properties)}

    public static readonly IEnumerable<{className}> Items =
    [
{string.Join("\n", items)}
    ];
}}
";

            // Add the source code to the compilation.
            context.AddSource($"{className}.g.cs", source);
        }
    }

    [XmlRoot("ISO_4217")]
    public class ISO4217
    {
        [XmlAttribute("Pblshd")]
        public DateTime Published { get; set; }
        [XmlElement("CcyTbl")]
        public CurrencyTable CurrencyTable { get; set; }
    }

    public class CurrencyTable
    {
        [XmlElement("CcyNtry")]
        public List<CurrencyEntry> CurrencyEntries { get; set; }
    }

    public class CurrencyEntry
    {
        [XmlElement("CtryNm")]
        public string CountryName { get; set; }
        [XmlElement("CcyNm")]
        public string CurrencyName { get; set; }
        [XmlElement("Ccy")]
        public string CurrencyCode { get; set; }
        [XmlElement("CcyNbr")]
        public int CurrencyNumber { get; set; }
        [XmlElement("CcyMnrUnts")]
        public string MinorUnits { get; set; }
    }
}